from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

from telegram_bot.apps.bot import markups
from telegram_bot.apps.bot.utils.calculate import calculate_slipper_profit, calculate_mint_profit


class Slipper(StatesGroup):
    dear_slipper = State()
    cheap_slipper = State()
    done = State()
    mint_check = State()


async def slipper_start(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.answer("–ß—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø. –¥–æ—Ö–æ–¥ –∏ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —ç–Ω–µ—Ä–≥–∏—é,"
                              " –Ω–∞–¥–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–¥–∞—Ç—å —Ç–≤–æ–π —Ç–∞–ø–æ–∫ —Å 0-–º –º–∏–Ω—Ç–æ–º –Ω–∞ —Ä—ã–Ω–∫–µ –∏ –∫—É–ø–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—à–µ–≤—ã–π"
                              " —Ç–∞–∫ –∂–µ —Å 0-–º –º–∏–Ω—Ç–æ–º –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –ø—Ä–æ–¥–∞—Ç—å —Å–º–∏–Ω—Ç—á–µ–Ω—ã–π —Ç–∞–ø–æ–∫.\n"
                              "–ë–æ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å —Å–∞–º.", reply_markup=types.ReplyKeyboardRemove())
    await call.message.answer("–í–≤–µ–¥–∏ —Å—É–º–º—É –ø—Ä–æ–¥–∞–∂–∏ —Ö–æ—Ä–æ—à–µ–≥–æ —Ç–∞–ø–∫–∞ –≤ SOL.")
    await Slipper.dear_slipper.set()


async def dear_slipper(message: types.Message, state: FSMContext):
    dear_slipper_num = message.text
    if dear_slipper_num.isdigit():
        await state.update_data(dear_slipper_num=dear_slipper_num)
        await message.answer("–í–≤–µ–¥–∏ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏ –±–æ–ª–µ–µ –¥–µ—à–µ–≤–æ–≥–æ —Ç–∞–ø–∫–∞ –≤ SOL.")
        await Slipper.cheap_slipper.set()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")


async def cheap_slipper(message: types.Message, state: FSMContext):
    cheap_slipper_num = message.text
    if cheap_slipper_num.isdigit():
        data = await state.get_data()
        dear_slipper_num = data["dear_slipper_num"]
        gst_usdt, sol_usdt, gmt_usdt, gst_sol, usdt_profit, gst_profit, sol_profit, profit = await calculate_slipper_profit(
            int(dear_slipper_num), int(cheap_slipper_num))
        await state.update_data(
            gst_usdt=gst_usdt,
            sol_usdt=sol_usdt,
            gmt_usdt=gmt_usdt,
            gst_sol=gst_sol,
            usdt_profit=usdt_profit,
            gst_profit=gst_profit,
            sol_profit=sol_profit,
            profit=profit
        )
        await message.answer("–¢–≤–æ–π profit üí∞\n"
                             "–î–æ–ø. –∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Ç–æ–ª—å–∫–æ —Å –ø—Ä–æ–¥–∞–∂–∏ —Ö–æ—Ä–æ—à–æ-–≤—ã–ø–∞–≤—à–µ–≥–æ —Ç–∞–ø–∫–∞.\n"
                             "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
                             f"{usdt_profit} USDT\n"
                             f"{gst_profit} GST\n"
                             f"{sol_profit} SOL\n\n"
                             "–¶–∏–∫–ª —Å–¥–µ–ª–∫–∏:\n"
                             "–ü—Ä–æ–¥–∞–∂–∞ —Ç–∞–ø–∫–∞ —Å 0 –º–∏–Ω—Ç–æ–º - –ü–æ–∫—É–ø–∫–∞ —Ç–∞–ø–∫–∞ (–≤–∑–∞–º–µ–Ω)\n"
                             f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-\n–ö—É—Ä—Å GTS - {gst_usdt} USDT\n–ö—É—Ä—Å SOL - {sol_usdt} USDT\n–ö—É—Ä—Å GMT - {gmt_usdt} USDT\n–ö—É—Ä—Å -SOL\GST - {gst_sol}\n\n")
        await message.answer("–ë—É–¥–µ—à—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Å–º–∏–Ω—Ç—á–∏–Ω—ã–π —Ç–∞–ø–æ–∫?", reply_markup=markups.slipper_menu.cheap_slipper())
        await Slipper.done.set()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")


async def done(call: types.CallbackQuery, state: FSMContext):
    if call.data == "yes":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ–¥–∞–∂–∏ —Ç–∞–ø–∫–∞ —Å –º–∏–Ω—Ç–æ–º –≤ SOL:",
                                  reply_markup=types.ReplyKeyboardRemove())
        await Slipper.mint_check.set()
    elif call.data == "no":
        await call.message.answer(
            '–•–æ—Ä–æ—à–æ, –ø–∏—à–∏—Ç–µ /–ü–µ—Ä–µ—Ä–∞—Å—á–∏—Ç–∞—Ç—å (–∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–æ—Ç–æ—Ä–∞—è —Å–Ω–∏–∑—É) –µ—Å–ª–∏ —è –≤–∞–º —Å–Ω–æ–≤–æ –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å!\n'
            '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–æ –±–æ—Ç–∞ –ø–∏—à–∏ /start\n'
            '---------------------------------\n'
            '–Ø —Ç—Ä–∞—á—É –º–æ–Ω–µ—Ç–∫—É –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –±–æ—Ç–∞, –±–ª–∞–≥–æ–¥–∞—Ä–æ—á–∫–∞ –∑–∞ —Å–∞—Ç–æ—à–∏—á–∫—É.\n'
            '–ú–Ω–æ–≥–æ –Ω–µ –Ω–∞–¥–æü¶å\n'
            '---------------------------------\n'
            'Wallet: USDC/GST/SOLüëá\n')
        await call.message.answer("81CzVw7QcjrvkUUvb6rnxsTkUJji7B5bUZTFnsEnproJ", reply_markup=markups.slipper_menu.done())

    elif call.data == "recalculate":
        await call.message.answer("–í–≤–µ–¥–∏ —Å—É–º–º—É –ø—Ä–æ–¥–∞–∂–∏ —Ö–æ—Ä–æ—à–µ–≥–æ —Ç–∞–ø–∫–∞ –≤ SOL.")
        await state.finish()
        await Slipper.dear_slipper.set()


async def mint_check(message: types.Message, state: FSMContext):
    mint_sum = message.text
    if mint_sum.isdigit():
        data = await state.get_data()
        money = await calculate_mint_profit(mint_sum, data)

        await message.answer("–¢–≤–æ–π profit üí∞\n"
                             f"{money} USDT\n"
                             f"{money / data['gst_usdt']} GST\n"
                             f"{money / data['sol_usdt']} SOL\n\n"
                             "–¶–∏–∫–ª —Å–¥–µ–ª–∫–∏:\n"
                             "–ü—Ä–æ–¥–∞–∂–∞ —Ç–∞–ø–∫–∞ —Å –º–∏–Ω—Ç–æ–º\n"
                             "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
                             "ü§ë*–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ –≤—Å—é —Å–¥–µ–ª–∫—É:*ü§ë\n"
                             f"{(data['profit'] * data['sol_usdt']) + money} USDT\n"
                             f"{((data['profit'] * data['sol_usdt']) / data['gst_usdt']) + (money / data['gst_usdt'])} GST\n"
                             f"{((data['profit'] * data['sol_usdt']) / data['sol_usdt']) + (money / data['sol_usdt'])} SOL\n"
                             f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-\n\n–ö—É—Ä—Å GTS - {data['gst_usdt']} USDT\n"
                             f"–ö—É—Ä—Å SOL - {data['sol_usdt']} USDT\n"
                             f"–ö—É—Ä—Å GMT - {data['gmt_usdt']} USDT\n"
                             f"–ö—É—Ä—Å -SOL\GST - {data['gst_sol']}\n\n"
                             "–¶–∏–∫–ª —Å–¥–µ–ª–∫–∏:\n"
                             "–ü—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–∞–≤—à–µ–≥–æ —Ç–∞–ø–∫–∞ —Å 0 –º–∏–Ω—Ç–æ–º - –ü–æ–∫—É–ø–∫–∞ —Ç–∞–ø–∫–∞ (–≤–∑–∞–º–µ–Ω) - –ü—Ä–æ–¥–∞–∂–∞ —Ç–∞–ø–∫–∞ —Å –º–∏–Ω—Ç–æ–º\n", "markdown")
        await message.answer(
            '–•–æ—Ä–æ—à–æ, –ø–∏—à–∏—Ç–µ /–ü–µ—Ä–µ—Ä–∞—Å—á–∏—Ç–∞—Ç—å (–∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–æ—Ç–æ—Ä–∞—è —Å–Ω–∏–∑—É) –µ—Å–ª–∏ —è –≤–∞–º —Å–Ω–æ–≤–æ –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å!\n'
            '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–æ –±–æ—Ç–∞ –ø–∏—à–∏ /start\n'
            '---------------------------------\n'
            '–Ø —Ç—Ä–∞—á—É –º–æ–Ω–µ—Ç–∫—É –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –±–æ—Ç–∞, –±–ª–∞–≥–æ–¥–∞—Ä–æ—á–∫–∞ –∑–∞ —Å–∞—Ç–æ—à–∏—á–∫—É.\n'
            '–ú–Ω–æ–≥–æ –Ω–µ –Ω–∞–¥–æü¶å\n'
            '---------------------------------\n'
            'Wallet: USDC/GST/SOLüëá', )
        await message.answer("81CzVw7QcjrvkUUvb6rnxsTkUJji7B5bUZTFnsEnproJ", reply_markup=markups.slipper_menu.done())

    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")


def register_slipper_handlers(dp: Dispatcher):
    callback = dp.register_callback_query_handler
    message = dp.register_message_handler
    callback(slipper_start, text="yes")
    message(dear_slipper, state=Slipper.dear_slipper)
    message(cheap_slipper, state=Slipper.cheap_slipper)
    callback(done, state=Slipper.done)
    message(mint_check, state=Slipper.mint_check)
